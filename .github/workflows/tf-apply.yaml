name: Reusable workflow for running apply

on:
  workflow_call:
    inputs:
      ARM_CLIENT_ID:
        description: "Service Principal application id"
        required: true
        type: string
      ARM_SUBSCRIPTION_ID:
        description: "Subscription Id"
        required: true
        type: string
      ARM_TENANT_ID:
        description: "Tenant Id"
        required: false
        type: string
      TERRAFORM_DIRECTORY:
        description: "The relative directory of of the plan to run (ex: ./environments/dev)"
        required: true
        type: string
      PLAN_ARTIFACT_NAME:
        description: "Name of artifact to download containing plan file"
        required: true
        type: string
      GITHUB_ENVIRONMENT:
        description: "Name of the GitHub Environment. Used if approvals are required."
        required: false
        type: string
        default: null
    secrets:
      ARM_CLIENT_SECRET:
        description: "SP pass"
        required: true

jobs:
  terraform_apply:
    name: Terraform Apply
    runs-on: [ ubuntu-latest ]
    environment: ${{ inputs.GITHUB_ENVIRONMENT }}

    env:
      ARM_CLIENT_ID: ${{ inputs.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ inputs.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ inputs.ARM_TENANT_ID }}

    steps:  
      - name: Download Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ inputs.PLAN_ARTIFACT_NAME }}
          path: "./"

      - name: Decompress TF Plan artifact
        run: unzip -o ${{ inputs.PLAN_ARTIFACT_NAME }}.zip # NOTE: -o will overwrite files it finds here

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_wrapper: true

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.TERRAFORM_DIRECTORY }}
        run: terraform init

      - name: Azure CLI Login
        run: |
          az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p ${{ env.ARM_CLIENT_SECRET }} --tenant ${{ env.ARM_TENANT_ID }}
          az account set -s ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Apply
        id: apply
        working-directory: ${{ inputs.TERRAFORM_DIRECTORY }}
        run: terraform apply -input=false plan.tfplan
        continue-on-error: true

      - name: Fail Job if Apply Fails
        if: steps.apply.outcome != 'success'
        run: |
            exit 1

      - name: Azure CLI Logout
        if: always()
        run: |
          az cache purge
          az account clear
